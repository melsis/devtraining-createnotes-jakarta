<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <client_script><![CDATA[function($rootScope,$scope, spUtil) {
	/* widget controller */
	var c = this;
	c.notePos =0; // remember the position of note in list
	// Lets emit the NoteId of selected note to another widget
	
	c.selectItem = function(index){
		// Sys id of note
		c.notePos = index;
		var noteID = c.data.notes[index].sys_id;
    console.log('c.notePos:' + c.notePos);
		$rootScope.noteID = noteID;
		$rootScope.$emit('selectNote',noteID);
	}
	
	// subscribe on updatednote
	$rootScope.$on('updatedNote', function(event,data){
		console.log(data);
		// once we get update event
		c.data.notes[c.notePos].title = data.title;
		c.data.notes[c.notePos].note = data.note;
		c.data.notes[c.notePos].sys_created_on = data.sys_created_on;
		c.data.notes[c.notePos].sys_updated_on = data.sys_updated_on;
	});
	
	// Let register a listener on table so if there was 
	// any CUD operations on standard ServiceNow UI could be detected
	spUtil.recordWatch($scope,'x_snc_createnotes_note', "noteANYTHING", function(name,data){
		console.log(name.data.operation); 
		console.log(name); 
		if (name.data.operation == 'insert'){
			c.server.refresh();
		}
		if (name.data.operation == 'update'){
			c.server.refresh();
			//or we can update c.data using name.data.sys_id and name object
			// and update the server c.server.updat();
		}
		if (name.data.operation == 'delete'){
			c.server.refresh();
			// or we can call server and make sure record deleted
			// once confirmd promise update c.data.notes = r.data.notes
			// array object
		}
	});
	
	
	// subcscibe on deleteNote
	$rootScope.$on('deleteNote', function(event,data){
		console.log('scope notePos:' + $scope.notePos);
		console.log('c.notePos:' + c.notePos);
		c.data.notes.splice(c.notesPos,1);
		// need to tell AJ, scope changed
		// $scope.$apply() didnt work
		// lets refresh the server call
		c.server.refresh();
		

	});
	
	c.addNote= function(){
		// Create a new record on Note-Table from server
		// Then wait for promise and then update the Note on client
		// Finally publish event so we can update the Body Widget 
		// with initial creation
		c.server.get({
			action: 'createNote'
			
		}).then(function(r){
			c.data.notes.unshift(r.data.newNote);// push it front
			//We also need the NoteID to emit
			//Do I need? c.data.NoteId = r.data.noteID:
			$rootScope.noteID = r.data.noteID;
			$rootScope.$emit('selectNote',r.data.noteID);
			
		});
	}

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.top-butter {margin-top: 20px}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>notes_list</id>
        <internal>false</internal>
        <link/>
        <name>Notes List</name>
        <option_schema>[{"hint":"Specify a title for the Notes List widget","name":"title","default_value":"Notes","label":"Title","type":"string"},{"hint":"Select the maximum number of records to display","name":"maximum_records_to_display","default_value":"5","label":"Maximum records to display","type":"choice","choices":[{"label":"2","value":"2"},{"label":"3","value":"3"},{"label":"5","value":"5"},{"label":"7","value":"7"},{"label":"9","value":"9"},{"label":"11","value":"11"},{"label":"13","value":"13"},{"label":"15","value":"15"},{"label":"17","value":"17"}]}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */
	data.notes = []; // lets have array of note objects

	// get notes for current user
	var noteGR = new GlideRecord('x_snc_createnotes_note');
	noteGR.addQuery('user',gs.getUserID());
	noteGR.orderByDesc('sys_updated_on');// sorting by update
	noteGR.setLimit(options.maximum_records_to_display);// we use Options tr get the user limit
	noteGR.query();
	while(noteGR.next()){
		// Object note to populate and push into note array
		var noteObj = {};
		// We need service portal helper $sp 
		// getting display values of records
		$sp.getRecordDisplayValues(noteObj,noteGR,'number,title,sys_id,sys_created_on,sys_updated_on');
    //get the note body
		
		noteObj.note = noteGR.getValue('note').slice(0,30);
		// lets push the object into the array
		data.notes.push(noteObj);
	}
	
  if (input){
		if (input.action == 'createNote'){
			var newNoteGR = new GlideRecord('x_snc_createnotes_note');
			newNoteGR.newRecord();
			newNoteGR.setValue('user',gs.getUserID());
			var id = newNoteGR.insert();
			data.noteID = id;
			data.newNote = {};
			$sp.getRecordValues(data.newNote,newNoteGR,'title,note,sys_id,sys_created_on,sys_updated_on');
		}
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-12-02 12:45:43</sys_created_on>
        <sys_id>72c89069db320300b08c7befbf961902</sys_id>
        <sys_mod_count>89</sys_mod_count>
        <sys_name>Notes List</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_72c89069db320300b08c7befbf961902</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-12-07 12:29:40</sys_updated_on>
        <template><![CDATA[
 <div class="panel-group">
   <div class="panel panel-default panel-primary">
 
  <div class="panel-heading clearfix">
    <h3 class="panel-title pull-left">
      {{::c.options.title}}
    </h3>
    <div class="panel-body">
    <button class="btn btn-default btn-md  pull-right" ng-click="c.addNote()">
      <span class="glyphicon glyphicon-plus"></span>
    </button> 
    </div>
    <div class="panel-body">
      <input placeholder="Filter" class="form-control" ng-model="noteFilter"/>
    </div>
  </div>
  <div class="panel-body" >

    <div class="list-group" ng-click="c.selectItem($index)" ng-repeat="note in data.notes | filter: noteFilter">
      <a class="list-group-item">
        <h4 class="list-group-item-heading">
          {{note.title}}
          <small class="text-muted">${Created: }{{note.sys_created_on | date:'shortDate'}}
          </small>
        </h4>
        <p>
          {{note.note}}${...}
        </p>
        <p>
          <small class="text-muted">${Updated: }{{note.sys_updated_on | date:'shortDate'}}
          </small>
        </p>
      </a>
    </div>   
  </div>
</div>
</div>]]></template>
    </sp_widget>
</record_update>
